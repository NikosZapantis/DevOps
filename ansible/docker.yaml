---
- hosts: all
  become: true

  vars:
    docker_user: "{{ ansible_user }}"
    docker_project_path: "/home/{{ ansible_user }}/docker"

  tasks:
    # - name: Install NGINX
    #   apt:
    #     name: nginx
    #     state: present
    #     update_cache: yes
    
    # - name: Copy NGINX configuration file
    #   copy:
    #     src: "{{ playbook_dir }}/reverseproxy/nginx.node.j2"
    #     dest: /etc/nginx/sites-available/spring
    #   notify: restart nginx

    # - name: Enable reverse proxy conf
    #   file:
    #     src: /etc/nginx/sites-available/spring
    #     dest: /etc/nginx/sites-enabled/spring
    #     state: link
    #   notify: restart nginx
    
    # - name: Disable default NGINX site
    #   file:
    #     path: /etc/nginx/sites-enabled/default
    #     state: absent
    #   notify: restart nginx
      
    - name: Install required packages
      apt:
        name:
          - software-properties-common
          - curl
          - apt-transport-https
          - ca-certificates
        state: present
        update_cache: true
      
    - name: Manually Add docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu focal stable"
        state: present
        filename: docker
        update_cache: yes

    - name: Install Docker CE and Compose plugin
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: true

    - name: Add existing user to group docker
      user:
        name: "{{  docker_user }}"
        groups: docker
        append: yes

    - name: Create deployment directory
      file:
        path: "{{ docker_project_path }}"
        state: directory
        owner: "{{ docker_user }}"
        group: docker
        mode: '0755'

    - name: Synchronize entire docker project directory
      synchronize:
        src: "{{ playbook_dir }}/.."
        dest: "{{ docker_project_path }}"
        recursive: yes
        delete: no
        rsync_opts:
          - "--chmod=Du=rwx,Dg=rx,Fu=rw,Fg=r,Fo=r"

    # - name: Check if backend folder exists on remote
    #   stat:
    #     path: "{{ docker_project_path }}/App/backend"
    #   register: backend_status

    # - name: Check if frontend folder exists on remote
    #   stat:
    #     path: "{{ docker_project_path }}/App/frontend"
    #   register: frontend_status

    - name: Synchronize backend folder
      synchronize:
        src: "{{ playbook_dir }}/../App/backend"
        dest: "{{ docker_project_path }}/App/backend"
        recursive: yes

    - name: Synchronize frontend folder
      synchronize:
        src: "{{ playbook_dir }}/../App/frontend"
        dest: "{{ docker_project_path }}/App/frontend"
        recursive: yes

    - name: Stop existing containers
      command: docker compose down
      args:
        chdir: "{{ docker_project_path }}/docker"
      ignore_errors: yes

    - name: Find process using port 8080
      shell: |
        lsof -ti :8080 || true
      register: port_8080_pid
      changed_when: false
      
    - name: Kill process using port 8080
      command: kill -9 {{ port_8080_pid.stdout }}
      when: port_8080_pid.stdout != ""
      ignore_errors: yes

    - name: Run docker compose 
      command: docker compose up -d
      args:
        chdir: "{{ docker_project_path }}/docker"

  handlers:
    # - name: restart nginx
    #   service:
    #     name: nginx
    #     state: restarted
